import { useMutation, useQuery } from '@tanstack/react-query'

import { AxiosError } from 'axios'

import instance from '@/configs/axios/instance'

import {
  MutationHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { AuthApi } from './Auth.api'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
export const authApi = new AuthApi({ instance: instance })

/**
 * query key 에 undfined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */
export const QUERY_KEY_AUTH_API = {
  CONTROLLER_SIGNUP: () => ['AUTH_CONTROLLER_SIGNUP'],
  CONTROLLER_SIGN_IN: () => ['AUTH_CONTROLLER_SIGN_IN'],
  CONTROLLER_SOCIAL_LOGIN: () => ['AUTH_CONTROLLER_SOCIAL_LOGIN'],
  CONTROLLER_REFRESH: () => ['AUTH_CONTROLLER_REFRESH'],
  CONTROLLER_GET_PROFILE: (
    variables?: Parameter<typeof authApi.authControllerGetProfile>,
  ) => ['AUTH_CONTROLLER_GET_PROFILE', variables].filter(isDefined),
  CONTROLLER_UPDATE_PROFILE: () => ['AUTH_CONTROLLER_UPDATE_PROFILE'],
}

/**
 * No description
 *
 * @tags auth
 * @name AuthControllerSignup
 * @request POST:/auth/singup */

export const useAuthControllerSignupMutation = (
  params: MutationHookParams<
    typeof authApi.authControllerSignup,
    AxiosError<any>
  >,
) => {
  const mutationKey = QUERY_KEY_AUTH_API.CONTROLLER_SIGNUP()
  return useMutation({
    mutationKey,
    mutationFn: authApi.authControllerSignup,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags auth
 * @name AuthControllerSignIn
 * @request POST:/auth/login */

export const useAuthControllerSignInMutation = (
  params: MutationHookParams<
    typeof authApi.authControllerSignIn,
    AxiosError<any>
  >,
) => {
  const mutationKey = QUERY_KEY_AUTH_API.CONTROLLER_SIGN_IN()
  return useMutation({
    mutationKey,
    mutationFn: authApi.authControllerSignIn,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags auth
 * @name AuthControllerSocialLogin
 * @request POST:/auth/social-login */

export const useAuthControllerSocialLoginMutation = (
  params: MutationHookParams<
    typeof authApi.authControllerSocialLogin,
    AxiosError<any>
  >,
) => {
  const mutationKey = QUERY_KEY_AUTH_API.CONTROLLER_SOCIAL_LOGIN()
  return useMutation({
    mutationKey,
    mutationFn: authApi.authControllerSocialLogin,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags auth
 * @name AuthControllerRefresh
 * @request POST:/auth/refresh */

export const useAuthControllerRefreshMutation = (
  params: MutationHookParams<
    typeof authApi.authControllerRefresh,
    AxiosError<any>
  >,
) => {
  const mutationKey = QUERY_KEY_AUTH_API.CONTROLLER_REFRESH()
  return useMutation({
    mutationKey,
    mutationFn: authApi.authControllerRefresh,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags auth
 * @name AuthControllerGetProfile
 * @request GET:/auth/profile
 * @secure */

export const useAuthControllerGetProfileQuery = <
  TData = RequestFnReturn<typeof authApi.authControllerGetProfile>,
>(
  params?: QueryHookParams<
    typeof authApi.authControllerGetProfile,
    AxiosError<any>,
    TData
  >,
) => {
  const queryKey = QUERY_KEY_AUTH_API.CONTROLLER_GET_PROFILE(params?.variables)
  return useQuery({
    queryKey,
    queryFn: () => authApi.authControllerGetProfile(params?.variables),
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags auth
 * @name AuthControllerUpdateProfile
 * @request PATCH:/auth/profile
 * @secure */

export const useAuthControllerUpdateProfileMutation = (
  params: MutationHookParams<
    typeof authApi.authControllerUpdateProfile,
    AxiosError<any>
  >,
) => {
  const mutationKey = QUERY_KEY_AUTH_API.CONTROLLER_UPDATE_PROFILE()
  return useMutation({
    mutationKey,
    mutationFn: authApi.authControllerUpdateProfile,
    ...params?.options,
  })
}
