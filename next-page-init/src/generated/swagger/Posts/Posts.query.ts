import {
  InfiniteData,
  useInfiniteQuery,
  useMutation,
  useQuery,
} from '@tanstack/react-query'

import { AxiosError } from 'axios'

import instance from '@/configs/axios/instance'

import {
  InfiniteQueryHookParams,
  MutationHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { PostsApi } from './Posts.api'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
export const postsApi = new PostsApi({ instance: instance })

/**
 * query key 에 undfined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */
export const QUERY_KEY_POSTS_API = {
  CONTROLLER_CREATE: () => ['POSTS_CONTROLLER_CREATE'],
  CONTROLLER_FIND_ALL: (
    variables?: Parameter<typeof postsApi.postsControllerFindAll>,
  ) => ['POSTS_CONTROLLER_FIND_ALL', variables].filter(isDefined),
  CONTROLLER_FIND_ALL_INFINITE: (
    variables?: Parameter<typeof postsApi.postsControllerFindAll>,
  ) => ['POSTS_CONTROLLER_FIND_ALL_INFINITE', variables].filter(isDefined),
  CONTROLLER_FIND_ONE: (
    variables?: Parameter<typeof postsApi.postsControllerFindOne>,
  ) => ['POSTS_CONTROLLER_FIND_ONE', variables].filter(isDefined),
  CONTROLLER_UPDATE: () => ['POSTS_CONTROLLER_UPDATE'],
  CONTROLLER_REMOVE: () => ['POSTS_CONTROLLER_REMOVE'],
}

/**
 * No description
 *
 * @tags posts
 * @name PostsControllerCreate
 * @request POST:/posts
 * @secure */

export const usePostsControllerCreateMutation = (
  params: MutationHookParams<
    typeof postsApi.postsControllerCreate,
    AxiosError<any>
  >,
) => {
  const mutationKey = QUERY_KEY_POSTS_API.CONTROLLER_CREATE()
  return useMutation({
    mutationKey,
    mutationFn: postsApi.postsControllerCreate,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags posts
 * @name PostsControllerFindAll
 * @request GET:/posts */

export const usePostsControllerFindAllQuery = <
  TData = RequestFnReturn<typeof postsApi.postsControllerFindAll>,
>(
  params?: QueryHookParams<
    typeof postsApi.postsControllerFindAll,
    AxiosError<any>,
    TData
  >,
) => {
  const queryKey = QUERY_KEY_POSTS_API.CONTROLLER_FIND_ALL(params?.variables)
  return useQuery({
    queryKey,
    queryFn: () => postsApi.postsControllerFindAll(params?.variables),
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags posts
 * @name PostsControllerFindAll
 * @request GET:/posts
 */
export const usePostsControllerFindAllInfiniteQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof postsApi.postsControllerFindAll>,
    Parameter<typeof postsApi.postsControllerFindAll>
  >,
>(
  params?: InfiniteQueryHookParams<
    typeof postsApi.postsControllerFindAll,
    AxiosError<any>,
    TData
  >,
) => {
  const queryKey = QUERY_KEY_POSTS_API.CONTROLLER_FIND_ALL_INFINITE(
    params?.variables,
  )

  return useInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }) => {
      return postsApi.postsControllerFindAll({
        ...params?.variables,
        query: { ...params?.variables?.query, cursor: pageParam },
      })
    },
    getNextPageParam: (lastPage) => {
      return lastPage.next
    },
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags posts
 * @name PostsControllerFindOne
 * @request GET:/posts/{id}
 * @secure */

export const usePostsControllerFindOneQuery = <
  TData = RequestFnReturn<typeof postsApi.postsControllerFindOne>,
>(
  params: QueryHookParams<
    typeof postsApi.postsControllerFindOne,
    AxiosError<any>,
    TData
  >,
) => {
  const queryKey = QUERY_KEY_POSTS_API.CONTROLLER_FIND_ONE(params.variables)
  return useQuery({
    queryKey,
    queryFn: () => postsApi.postsControllerFindOne(params.variables),
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags posts
 * @name PostsControllerUpdate
 * @request PATCH:/posts/{id}
 * @secure */

export const usePostsControllerUpdateMutation = (
  params: MutationHookParams<
    typeof postsApi.postsControllerUpdate,
    AxiosError<any>
  >,
) => {
  const mutationKey = QUERY_KEY_POSTS_API.CONTROLLER_UPDATE()
  return useMutation({
    mutationKey,
    mutationFn: postsApi.postsControllerUpdate,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags posts
 * @name PostsControllerRemove
 * @request DELETE:/posts/{id}
 * @secure */

export const usePostsControllerRemoveMutation = (
  params: MutationHookParams<
    typeof postsApi.postsControllerRemove,
    AxiosError<any>
  >,
) => {
  const mutationKey = QUERY_KEY_POSTS_API.CONTROLLER_REMOVE()
  return useMutation({
    mutationKey,
    mutationFn: postsApi.postsControllerRemove,
    ...params?.options,
  })
}
