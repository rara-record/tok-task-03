import { ContentType, HttpClient, RequestParams } from '../@http-client'
import {
  CreatePostDtoType,
  PaginatedDtoType,
  PostEntityType,
  UpdatePostDtoType,
} from '../@types/data-contracts'
import { DeepOmitReadOnly } from '../@types/util-types'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

export class PostsApi<
  SecurityDataType = unknown,
> extends HttpClient<SecurityDataType> {
  /**
   * No description
   *
   * @tags posts
   * @name PostsControllerCreate
   * @request POST:/posts
   * @secure
   */
  postsControllerCreate = (variables: {
    data: DeepOmitReadOnly<CreatePostDtoType>
    params?: RequestParams
  }) =>
    this.request<PostEntityType, any>({
      path: `/posts`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...variables.params,
    })

  /**
   * No description
   *
   * @tags posts
   * @name PostsControllerFindAll
   * @request GET:/posts
   */
  postsControllerFindAll = (variables?: {
    query?: {
      /**
       * The maximum number of posts to return
       * @min 0
       * @exclusiveMin true
       * @default 10
       */
      limit?: number
      /**
       * The cursor to start from
       * @min 0
       * @exclusiveMin true
       */
      cursor?: number
    }
    params?: RequestParams
  }) =>
    this.request<
      PaginatedDtoType & {
        result?: PostEntityType[]
      },
      any
    >({
      path: `/posts`,
      method: 'GET',
      query: variables?.query,
      format: 'json',
      ...variables?.params,
    })

  /**
   * No description
   *
   * @tags posts
   * @name PostsControllerFindOne
   * @request GET:/posts/{id}
   * @secure
   */
  postsControllerFindOne = (variables: {
    id: string
    params?: RequestParams
  }) =>
    this.request<PostEntityType, any>({
      path: `/posts/${variables.id}`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...variables.params,
    })

  /**
   * No description
   *
   * @tags posts
   * @name PostsControllerUpdate
   * @request PATCH:/posts/{id}
   * @secure
   */
  postsControllerUpdate = (variables: {
    id: string
    data: DeepOmitReadOnly<UpdatePostDtoType>
    params?: RequestParams
  }) =>
    this.request<PostEntityType, any>({
      path: `/posts/${variables.id}`,
      method: 'PATCH',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...variables.params,
    })

  /**
   * No description
   *
   * @tags posts
   * @name PostsControllerRemove
   * @request DELETE:/posts/{id}
   * @secure
   */
  postsControllerRemove = (variables: { id: string; params?: RequestParams }) =>
    this.request<void, any>({
      path: `/posts/${variables.id}`,
      method: 'DELETE',
      secure: true,
      ...variables.params,
    })
}

//
